{
  "Readline Interface": {
    "prefix": "readline",
    "body": [
      "const readline = require('readline');",
      "",
      "const rl = readline.createInterface({",
      "  input: process.stdin,",
      "  output: process.stdout",
      "});",
      "",
      "rl.question('$1', (answer) => {",
      "  console.log('Your answer:', answer);",
      "  rl.close();",
      "});"
    ],
    "description": "Set up a readline interface for terminal input/output"
  },
  "Console Log": {
    "prefix": "cl",
    "body": ["console.log('$1');"],
    "description": "Log output to the console"
  },
  "Function Declaration": {
    "prefix": "func",
    "body": [
      "function $1($2) {",
      "  $3",
      "}"
    ],
    "description": "Basic function declaration"
  },
  "Arrow Function": {
    "prefix": "arrowfunc",
    "body": [
      "const $1 = ($2) => {",
      "  $3",
      "};"
    ],
    "description": "Arrow function template"
  },
  "For Loop": {
    "prefix": "for",
    "body": [
      "for (let $1 = 0; $1 < $2; $1++) {",
      "  $3",
      "}"
    ],
    "description": "Standard for loop"
  },
  "For Each Loop": {
    "prefix": "foreach",
    "body": [
      "$1.forEach(($2) => {",
      "  $3",
      "});"
    ],
    "description": "For each loop"
  },
  "If Statement": {
    "prefix": "if",
    "body": [
      "if ($1) {",
      "  $2",
      "}"
    ],
    "description": "Basic if statement"
  },
  "If-Else Statement": {
    "prefix": "ifelse",
    "body": [
      "if ($1) {",
      "  $2",
      "} else {",
      "  $3",
      "}"
    ],
    "description": "If-Else statement"
  },
  "Ternary Operator": {
    "prefix": "ternary",
    "body": ["$1 ? $2 : $3;"],
    "description": "Ternary operator"
  },
  "Switch Statement": {
    "prefix": "switch",
    "body": [
      "switch ($1) {",
      "  case $2:",
      "    $3",
      "    break;",
      "  default:",
      "    $4",
      "}"
    ],
    "description": "Switch statement"
  },
  "Node.js HTTP Server": {
    "prefix": "httpserver",
    "body": [
      "const http = require('http');",
      "",
      "const server = http.createServer((req, res) => {",
      "  res.writeHead(200, { 'Content-Type': 'text/plain' });",
      "  res.end('Hello, World!');",
      "});",
      "",
      "server.listen(3000, () => {",
      "  console.log('Server running at http://localhost:3000/');",
      "});"
    ],
    "description": "Create a simple Node.js HTTP server"
  },
  "Read File": {
    "prefix": "readfile",
    "body": [
      "const fs = require('fs');",
      "",
      "fs.readFile('$1', 'utf8', (err, data) => {",
      "  if (err) throw err;",
      "  console.log(data);",
      "});"
    ],
    "description": "Read a file using fs module"
  },
  "Write File": {
    "prefix": "writefile",
    "body": [
      "const fs = require('fs');",
      "",
      "fs.writeFile('$1', '$2', (err) => {",
      "  if (err) throw err;",
      "  console.log('File has been saved!');",
      "});"
    ],
    "description": "Write a file using fs module"
  },
  "Express Route": {
    "prefix": "expressroute",
    "body": [
      "app.${1:get}('$2', (req, res) => {",
      "  res.send('$3');",
      "});"
    ],
    "description": "Create an Express.js route"
  },
  "MySQL Query": {
    "prefix": "mysqlquery",
    "body": [
      "const mysql = require('mysql');",
      "",
      "const connection = mysql.createConnection({",
      "  host: '$1',",
      "  user: '$2',",
      "  password: '$3',",
      "  database: '$4'",
      "});",
      "",
      "connection.query('$5', (err, results) => {",
      "  if (err) throw err;",
      "  console.log(results);",
      "});",
      "",
      "connection.end();"
    ],
    "description": "Execute a MySQL query"
  },
  "Load Environment Variables": {
    "prefix": "dotenv",
    "body": [
      "require('dotenv').config();",
      "console.log(process.env.${1:VAR_NAME});"
    ],
    "description": "Load and use environment variables"
  },
  "Express Middleware": {
    "prefix": "middleware",
    "body": [
      "app.use((req, res, next) => {",
      "  console.log('Request URL:', req.url);",
      "  next();",
      "});"
    ],
    "description": "Create Express middleware"
  }
}
