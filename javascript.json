{
	"Readline Interface": {
	  "prefix": "readline",
	  "body": [
		"const readline = require('readline');",
		"",
		"const rl = readline.createInterface({",
		"  input: process.stdin,",
		"  output: process.stdout",
		"});",
		"",
		"rl.question('${1:question}', (answer) => {",
		"  console.log('${2:your answer}:', answer);",
		"  rl.close();",
		"});"
	  ],
	  "description": "Set up a readline interface for terminal input/output"
	},
	"Console Log": {
	  "prefix": "consl",
	  "body": ["console.log($1);"],
	  "description": "Log output to the console"
	},
	"Function Declaration": {
	  "prefix": "func",
	  "body": [
		"function ${1:functionName}(${2:parameters}) {",
		"  ${3:// function body}",
		"}"
	  ],
	  "description": "Basic function declaration"
	},
	"Arrow Function": {
	  "prefix": "arrowfunc",
	  "body": [
		"const ${1:functionName} = (${2:parameters}) => {",
		"  ${3:// function body}",
		"};"
	  ],
	  "description": "Arrow function template"
	},
	"For Loop": {
	  "prefix": "forl",
	  "body": [
		"for (let ${1:i} = 0; ${1:i} < ${2:limit}; ${1:i}++) {",
		"  ${3:// loop body}",
		"}"
	  ],
	  "description": "Standard for loop"
	},
	"For Each Loop": {
	  "prefix": "foreach",
	  "body": [
		"${1:array}.forEach((${2:item}) => {",
		"  ${3:// loop body}",
		"});"
	  ],
	  "description": "For each loop"
	},
	"If Statement": {
	  "prefix": "if",
	  "body": [
		"if (${1:condition}) {",
		"  ${2:// if body}",
		"}"
	  ],
	  "description": "Basic if statement"
	},
	"If-Else Statement": {
	  "prefix": "ifelse",
	  "body": [
		"if (${1:condition}) {",
		"  ${2:// if body}",
		"} else {",
		"  ${3:// else body}",
		"}"
	  ],
	  "description": "If-Else statement"
	},
	"Ternary Operator": {
	  "prefix": "ternary",
	  "body": [
		"${1:condition} ? ${2:valueIfTrue} : ${3:valueIfFalse};"
	  ],
	  "description": "Ternary operator"
	},
	"Switch Statement": {
	  "prefix": "switch",
	  "body": [
		"switch (${1:value}) {",
		"  case ${2:caseValue}:",
		"    ${3:// case body}",
		"    break;",
		"  default:",
		"    ${4:// default body}",
		"}"
	  ],
	  "description": "Switch statement"
	},
	"Node.js HTTP Server": {
	  "prefix": "httpserver",
	  "body": [
		"const http = require('http');",
		"",
		"const server = http.createServer((req, res) => {",
		"  res.writeHead(200, { 'Content-Type': 'text/plain' });",
		"  res.end('${1:Hello, World!}');",
		"});",
		"",
		"server.listen(3000, () => {",
		"  console.log('Server running at http://localhost:3000/');",
		"});"
	  ],
	  "description": "Create a simple Node.js HTTP server"
	},
	"Read File": {
	  "prefix": "readfile",
	  "body": [
		"const fs = require('fs');",
		"",
		"fs.readFile('${1:filePath}', 'utf8', (err, data) => {",
		"  if (err) throw err;",
		"  console.log(data);",
		"});"
	  ],
	  "description": "Read a file using fs module"
	},
	"Write File": {
	  "prefix": "writefile",
	  "body": [
		"const fs = require('fs');",
		"",
		"fs.writeFile('${1:filePath}', '${2:fileContent}', (err) => {",
		"  if (err) throw err;",
		"  console.log('${3:File has been saved!}');",
		"});"
	  ],
	  "description": "Write a file using fs module"
	},
	"Express Route": {
	  "prefix": "expressroute",
	  "body": [
		"app.${1:get}('${2:/route}', (req, res) => {",
		"  res.send('${3:response}');",
		"});"
	  ],
	  "description": "Create an Express.js route"
	},
	"MySQL Query": {
	  "prefix": "mysqlquery",
	  "body": [
		"const mysql = require('mysql');",
		"",
		"const connection = mysql.createConnection({",
		"  host: '${1:host}',",
		"  user: '${2:user}',",
		"  password: '${3:password}',",
		"  database: '${4:database}'",
		"});",
		"",
		"connection.query('${5:query}', (err, results) => {",
		"  if (err) throw err;",
		"  console.log(results);",
		"});",
		"",
		"connection.end();"
	  ],
	  "description": "Execute a MySQL query"
	},
	"Load Environment Variables": {
	  "prefix": "dotenv",
	  "body": [
		"require('dotenv').config();",
		"console.log(process.env.${1:VAR_NAME});"
	  ],
	  "description": "Load and use environment variables"
	},
	"Express Middleware": {
	  "prefix": "middleware",
	  "body": [
		"app.use((req, res, next) => {",
		"  console.log('Request URL:', req.url);",
		"  next();",
		"});"
	  ],
	  "description": "Create Express middleware"
	}
  }
  
